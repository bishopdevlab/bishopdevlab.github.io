---- 기억하기 ----
* Front-end 개발서버  구동
> yarn serve
- http://localhost:8080

* Express (Back-end) 구동
> set DEBUG="solarmonitor":* & npm start
- http://localhost:3000


대시보드 테마 적용


마크다운 코드 넣기 예시

**app.js**  
```javascript
app.use('/api', require('./routes/api'))
app.use(express.static(path.join(__dirname, 'fe', 'dist')));
```

마크다운에 쉘 커멘트 넣기 예시
```bash
$ DEBUG=be:* npm start
```



--------------------------------------------------------------------------
https://fkkmemi.github.io/nemv/
기초편 강좌 실습

* 강좌 소개
NEMV(Node.js, Express.js, MongoDB, Vue.js)를 이용해 웹사이트를 전체를 혼자 만들어 보는 강좌입니다.

node.js & express.js(백엔드): 웹서버, API서버
mongoDB: NoSQL 데이터베이스
vue.js(프론트엔드): 화면구성
vuetify.js(프론트엔드): 머터리얼 화면구성


1. Node.js 설치
 - Chrome V8 Javascript 엔진으로 빌드된 Javascript 런타임(Javascript가 구동되는 환경). 주로 Back-end용으로 사용.
 - https://nodejs.org/en/ 다운로드 및 Default 설치

2. Express 설치
 - Node.js를 위한 빠르고 간편한 웹 프레임워크. Node.js 개발시 개발을 빠르고 손쉽게 할 수 있도록 도와주는 역할
 - frontend가 backend(solarmonitor) 내에 위치하는 폴더 구조로 구성. solarmonitor / frontend


1) Express generator 전역으로 설치
> npm i express-generator -g

2) Express 설치 (Backend)
> express --view=pug solarmonitor			***
> cd solarmonitor
> npm i

 - Express (Back-end) 구동
> set DEBUG="solarmonitor":* & npm start		***

3) 사이트 확인
- http://localhost:3000 접속


3. vuetify.js 설치

https://sweetlog.netlify.com/vue/using-vue-with-vuex-vue-router-vuetify/
- yarn: npm과 유사한 javascript 패키지 매니저. facebook에서 만듬. npm보다 빠르다.
- vuetify.js: Vue 생태계에서 가장 활동적이며 다양한, 완벽한 기능을 갖춘 개발 프레임워크이다. 쉽게 말해 vue에서 사용할 수 있는 용이한 UI toolkit이라고 할 수 있다.
- Vuex: Vue.js 애플리케이션에 대한 상태 관리 패턴 + 라이브러리. 애플리케이션의 모든 컴포넌트에 대한 중앙 집중식 저장소 역할을 하며, 예측 가능한 방식으로 상태를 변경할 수 있다.

1) yarn 설치
 - https://classic.yarnpkg.com/en/ 다운로드 및 Default 설치
> yarn -v (버전 확인)

2) vue cli 설치
 - Vue.js 개발을 위한 시스템, 어플리케이션 개발에 집중할 수 있도록 프로젝트의 구성을 도와주는 역할

> yarn global add @vue/cli
> vue --version (버전 확인)
@vue/cli 4.2.3

3) vue cli로 front-end 만들기
> vue create frontend (solarmonitor 폴더 에서 실행)	***
 - 설치 옵션: Manually 선택
   >> Babel/Router/Vuex/Linter / Formatter 선택 후 엔터
   >> Use history mode for router ? Yes
   >> Standard
   >> Lint on save
   >> In dedicatted config files
   >> Save preset ? No
   >> yarn
> cd frontend
> yarn serve (Front-end 개발서버  구동)
yarn run v1.22.0
...
DONE Compiled successfully in xxxms
...

4) 사이트 확인
 - http://localhost:8080/ 접속

5) vuetify 설치
> vue add vuetify					***
 - 설치 옵션: Configure 선택 => 물을때마다 Enter를 쳐서 default 선택 옵션으로 설치
   > Use a pre-made template? Yes
   > Use custom theme? No
   > Use custom properties? No
   > Select icon font? Material Icons
   > Use fonts as a dependency? No
   > Use a-la-carte components? No
   > Select locale? English

6) Front-end 개발서버  구동
solarmonitor/frontend 경로에서 실행
> yarn serve

7) 사이트 확인
 - http://localhost:8080/ 접속


4. 익스프레스와 뷰티파이 연동

1) Front-end 빌드하기
 - yarn serve로 실행한 http://localhost:8080는 front-end 개발모드
 - 실제 구현되어야할 곳은 back-end가 구동되는 http://localhost:3000에서 돌아가도록 함

solarmonitor/frontend 경로에서 실행
> yarn build
 - 빌드가 끝나면 frontend/dist 폴더에 빌드된 파일들이 생성된다.(css, js 파일 등)
 - 배포용으로 빌드되어 압축 및 암호화가되어 있음

2) Back-end 서버의 public 위치를 front-end 내용으로 변경
 - 정적으로 지정된 기본 public 디렉토리를 위의 빌드된 디렉토리로 변경
 - 파일들을 복사를 할수도 있으나 지속적으로 변경되어야 하므로 이와 같은 방법을 사용

# solarmon/app.js file 변경
// app.use(express.static(path.join(__dirname, 'public')));
app.use(express.static(path.join(__dirname, 'frontend', 'dist'))); // public -> frontend/dist

4) Express (Back-end) 구동
> set DEBUG="solarmonitor":* & npm start

5) 사이트 확인
 - Express (back-end) URL: http://localhost:3000 접속
 - vuetify (front-end, http://localhost:8080)와 동일한 화면이 표시된다.


5. API 서버 만들기
 - 정적인 라우터(예: /image/1.png, /about.html)는 정해진 곳에 파일이 있다면 응답으로 그 파일을 전송
 - 동적인 라우터(예: /user/xxx, /user/yyy)는 주소가 변경됨에 따라 다른 파일 혹은 내용을 전송

1) API용 라우터 만들기
 - 정적인 파일의 라우트를 위해 api용 router를 만든다.

# solarmon/app.js file 변경
 - 기존 라우터 정보 제거
// var indexRouter = require('./routes/index');
// var usersRouter = require('./routes/users');

// app.use('/', indexRouter);
// app.use('/users', usersRouter);

 - api 라우터 정보 추가 
app.use('/api', require('./routes/api'))


# solarmon/routes/api/index.js 파일 생성 후 코드 추가
var express = require('express');
var router = express.Router();

router.get('/', function(req, res, next) {
  res.render('나는 api입니다.');
});

module.exports = router;

2) Express (Back-end) 구동
> set DEBUG="solarmonitor":* & npm start

3) 사이트 확인
 - Express (back-end) URL: http://localhost:3000 접속
 - /api/어쩌고 로 들어오면 우선 처리해주고 /xxy/ 같은 모르는 패스가 들어오면 정적인 라우팅을 해주게 됩니다.
 - 정적인 라우터도 모르는 곳이면 더 아래에 있는 예외처리 라우터로 넘어가서 우리가 흔히 보는 404 에러를 보내주는 것입니다.


6. vuetify (fron-end) 수정
 - vuetify에 기본 제공된 파일들을 수정해보기

 * vuefity 구조
 - dist: 빌드된 파일들
 - public: 이미지등의 공용 자료들과 맨 처음 로드되는 index.html 파일
 - src/views: 페이지들
 - Home.vue: 메뉴 제외한 메인 화면 영역 
 - app.vue: 메뉴 포함된 시작 화면 영역
 - main.js: 시작 스크립트들

 * vue 파일 수정해보기
 > yarn serve
 - src/components/HelloWorld.vue 파일에서 문구 수정
 - http://localhost:8080/ 에서 실시간으로 변경되는 것을 확인

 * router 확인
 - router/index.js 확인 -> about, home 설정되어 있음


7. Vue Router 예외처리
 - http://localhost:8080/xxxx/와 같이 없는 url을 요청할 경우 없는 404 페이지를 표시할 수도 있지만,
   "없는 페이지"라는 예외처리된 페이지를 표시하는 것이 더 좋음.

 * 없다는 것을 알려줄 페이지 작성
 - frontend/src/views/e404.vue 파일 생성 
<template>
  <div>그런 페이지 없어요~</div>
</template>

 * 라우터에 예외 케이스 등록
 - frontend/src/router.js 파일에 router 정보 추가 (front-end path)
{
    path: '*',
    name: 'e404',
    component: () => import('../views/e404.vue')
  }
--> path: "*"은 등록 안된 모든 url을 의미함

* Back-end에 히스토리모드 설치
 - https://github.com/bripkens/connect-history-api-fallback 참고
> npm install --save connect-history-api-fallback

- solarmonitor/app.js (back-end path)
const history = require('connect-history-api-fallback') // 상단 아무곳이나 추가
app.use('/api', require('./routes/api'))
app.use(history())
app.use(express.static(path.join(__dirname, '../', 'fe', 'dist')));
--> static router 위에 history() 사용 선언

- front-end path에서 yarn build 후  부라우저에서 localhost:3000/zxv 확인


8. Vuetify 컴포넌트 사용해보기
 - fe/src/views/default.vue 생성

<template>
</template>
<script>
export default {
  name: 'default',
  data () {
    return {
    }
  },
  methods: {}
}
</script>
<style scoped>
</style>

 - vue 파일 구조
html, script, style이 함께 구성됨
html: 페이지 내에서 정적인 부분
script: 페이지 내에서 동적인 변환이 필요한 부분
style: 페이지 내의 특별한 스타일이 필요한 경우


--------------------------------------------------------------------------
https://fkkmemi.github.io/nemv/
기본편 강좌 실습

https://fkkmemi.github.io/nemv/nemv-016-git-start/
-> 기본편 강의중 Git 사용을 위해서 기초편 구축 내용을 요약하여 정리되어 있음.
 디렉터리 구조는 solarmon 하위에 be, fe가 위치한 형태로 구성됨
* Back-end 설치
 - Node.js 설치
 - Express 설치
 > express --view=pug be
 > cd be
 > yarn (종속패키지 설치)

* Front-end 설치
 > vue create fe
 > cd fe
 > vue add vuetify
 > yarn serve

* localhost:8080 확인

* Back-end public 디렉토리를 Front-end에 연결
- Front-end 빌드
> yarn build

* Back-end 설정
be/app.js file
app.use(express.static(path.join(__dirname, '../', 'fe', 'dist')));

* Back-end 실행
> cd ..
> cd be
> npm start

* http://localhost:3000 확인









------------------------------------------------------


* create be
> express --view=pug be
> cd be
> yarn
> SET DEBUG=be:* & npm start
http://localhost:3000/

* create fe
> vue create fe
Option:
Manually > Babel, Router, Vuex, Linter > Use history mode (Yes) > Standard > Lint on save > In dedicated config files > Save file (No)
> cd fe
> yarn serve
http://localhost:8080/

> vue add vuetify

Vuetify 1.3.2 이후 버전 옵션 항목 (대부분 엔터)
https://fkkmemi.github.io/talk/vuetify-update-cli/
Configure > pre-made template (Yes) > custom teme (No) > CSS variables (No) > Material Icons > font a dependency (No) > a-la-carte (No) > babel/polyfill (Yes) > English

> yarn serve
http://localhost:8080/


> yarn build
  fe / dist 폴더 생성됨

be / app.js 편집
dist 폴더를 사용하도록 변경
app.use(express.static(path.join(__dirname, 'public')));
->
app.use(express.static(path.join(__dirname, '../', 'fe', 'dist')));

> npm start
  vuetify(fe)가 실행됨
http://localhost:3000/



