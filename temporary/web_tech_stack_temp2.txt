제작 응용 서버편

1. NCP (Naver Cloud Platform) 가입 및 서버 생성
 - Micro(1vCPU, 1GB Mem, 50GB Disk, ubuntu-16) 1년간 무료
 - 공인IP 설정(월 4~5천원 유료), ACG(방화벽) - 포트포워딩 (SSH 접속 포트:  2000)

2. 서버 접속
 - putty를 사용하여 서버 접속용 공인 IP : 101.101.160.190, 외부 포트 : 2000 접속

3. Node.js 설치
- 이후 사용되는 명령어들은 Ubuntu-16 기준입니다.
- 본 과정은 처음에는 root로 진행하다가 7번에서 사용자 계정을 추가하여 이후 사용자 계정으로 진행합니다.
root로 접속/변경 후 진행(sudo -i)

* 최신버전 정보를 curl로 다운로드
(root)
> curl -sL https://deb.nodesource.com/setup_10.x | bash -
(user)
> curl -sL https://deb.nodesource.com/setup_10.x | sudo bash -

* node.js 설치
> apt-get install -y nodejs
(-y는 질문에 yes로 자동 대답)


* node.js 설치 확인
> node -v
v10.19.0
> npm -v
6.13.4

4. Git 설치
* 버전 확인
> git --version
git version 2.7.4
> apt list git -a
Listing... Done
git/xenial-updates,xenial-security,now 1:2.7.4-0ubuntu1.7 amd64 [installed]
git/xenial 1:2.7.4-0ubuntu1 amd64

* 최신버전 설치
> add-apt-repository ppa:git-core/ppa -y
> apt update
> apt install git -y
> git --version
git version 2.26.0


5. 서비스 디렉터(/var/www) 생성
> mkdir /var/www
> cd /var/www

6. 깃허브 연결하기
* 깃허브에 서버의 ssh 키 등록
github.com > personal setting > SSH and GPG keys > Add new SSH keys

* Key 생성
> ssh-keygen -t rsa -b 4096 -C "dbjavapia@gmail.com"
질문에 Enter 입력(3회) 후 키 생성됨
> cat ~/.ssh/id_rsa.pub
키값을 복사 > 깃허브 Key 입력에 붙여넣음 > Add SSH Key 버튼 > 깃허브 비밀번호 확인

* 깃허브 소스 복제
깃허브 레파지토리 > Clone or download > Use SSH > SSH key 복사
> cd /var/www
> git clone git@github.com:bishopdevlab/solarmon.git
> cd solarmon

7. 계정 추가
- 리눅스에서 root를 그대로 사용하는 것은 아무래도 위험합니다. 따라서 사용자 계정을 추가합니다.
이후는 bishop 계정을 사용합니다.
> adduser bishop (계정 추가)
> adduser bishop sudo (관리자 권한 부여)
 - 만일 yarn으로 패키지 설치 시 EACCES: permission denied 에러가 나는 경우 디렉터리 소유자를 체크합니다.

8. www 디렉터리 소유자 변경
> cd /var
> sudo chown -R bishop www/


32. 클라우드 서버 디비 설치 및 테스트


9. yarn 설치
* yarn: Facebook이 만든 자바스크립트 패키지 매니저
* 설치 방법:  https://classic.yarnpkg.com/en/docs/install#debian-stable
> curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
> echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
deb https://dl.yarnpkg.com/debian/ stable main
> sudo apt update && sudo apt install yarn
> yarn -v
1.22.4

10. 백엔드 서버 패키지 설치
> cd /var/www/solarmon/be
> yarn (package.json 종속요소들 설치(Express.js, cors 등)

11. 프론트엔드 서버 패키지 설치
> cd /var/www/solarmon/fe
> yarn (package.json 종속요소들 설치(Express.js, cors 등)
> yarn build (정적인 파일 생성)

12. 서버 구동
> cd /var/www/solarmon/be
> npm start

13. 리눅스 패키지 업데이트
* 클라우드 서버에서 커널을 제외한 리눅스 패키지 업데이트
https://www.bonusbits.com/wiki/HowTo:Upgrade_Ubuntu_without_Updating_the_Kernel
> sudo apt-mark hold linux-image-generic linux-headers-generic
linux-image-generic set on hold.
linux-headers-generic set on hold.

14. 몽고디비 설치
root 권한으로 설치(무관한듯 하나 혹시나)
* https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/ 매뉴얼을 따라 설치함
1. Import the public key used by the package management system.
> wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -
> sudo apt-get install gnupg
> wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -
2. Create a list file for MongoDB.
- Ubuntu 16.04 (Xenial) 탭 선택
> echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list
3. Reload local package database
> sudo apt-get update
4. Install the MongoDB packages.
> sudo apt-get install -y mongodb-org

설치정보 매뉴얼 설명:
data directory /var/lib/mongodb
log directory /var/log/mongodb
By default, MongoDB runs using the mongodb user account. If you change the user that runs the MongoDB process, you must also modify the permission to the data and log directories to give this user access to these directories.
configuration file /etc/mongod.conf

5. Run MongoDB
* 설치된 리눅스가 systemd(systemctl 명령어)를 사용하는지 System V init(service 명령어)를 사용해야 하는지, 아래 명령어로 확인할 수 있다.
> ps --no-headers -o comm 1
systemd

6. Start/Stop MongoDB
* Start
> sudo systemctl start mongod
* Status
> sudo systemctl status mongod
* Stop
> sudo systemctl stop mongod
* Restart
> sudo systemctl restart mongod

7. DB 확인
* MongoDB 쉘 실행 및 DB 확인
> mongo
> show dbs;
* DB 생성 후 데이터 추가
> use solarmon;
> db.test.insertOne({a:1});
> show dbs;
> exit

* 리눅스 시작 시 MongoDB 서비스 실행하기
> systemctl enable mongod.service

8. 포트 3000 열어주기
NCP 네이버 클라우드 플랫폼 (https://console.ncloud.com/) 접속 후 ACG 설정에서 TCP, 0.0.0.0/0(전체), 3000 포트를 열어줌

9. be 실행
> cd /var/www/solarmon/be
> npm start

10. 에러 해결
로컬 PC에서 github에서 소스를 clone 후 "10. 백엔드 서버 패키지 설치"부터 "12. 서버 구동"까지 진행하여 에러를 확인함

/var/www/solarmon/fe/src/views/user.vue
- console.log 주석 처리 (// console.log~~)
- http://localhost:3000/를 상대경로(/)로 변경

http://localhost:3000/ 접속 확인

* 변경코드 github에 push

10. 서버에서 변경 사항 받기
> cd /var/www/solarmon/
> git pull
> cd fe
> yarn build (갱신된 소스 빌드)
> cd ../be
> npm start


* 에러 발생 시 설치
Error: Cannot find module 'connect-history-api-fallback'Require stack:
> npm install --save connect-history-api-fallback

Error: Cannot find module 'http-errors'
> npm install



33. 배포를 위한 개발 환경 설정

개발 모드와 배포 모드의 구분하기 위한 설정

1. 백엔드 서버 모드 변경 실행

* 환경변수 테스트
node에서 process.env.NODE_ENV 환경변수로 모드를 구분할 수 있음
app.js 하단에 console.log(process.env.NODE_ENV) 코드를 추가하여 현재 모드가 무엇인지 확인

npm start로 node를 실행하는 것이 아니라 NODE_ENV를 지정해서 실행
> cd be
> NODE_ENV=xxMode node ./bin/www
--> 에러 발생: 윈도우에서는 NODE_ENV 인식하지 못함 => MacOS/Linux와 Windows의 환경변수 설정하는 방법이 다름

* 윈도우 환경변수 테스트 (PowerShell)
- PowerShell
> $env:NODE_ENV="xxMode"
- CMD
> set NODE_ENV=xxMode

> node ./bin/www
console.log에 의해 xxMode가 출력됨

* 모드 구분 전역변수 설정
 - package.json 파일에서 모드 환경변수를 설정하여 구분해서 실행
> cd /var/www/solarmon/
package.json 파일 생성 후 기본정보 설정 후 scripts에 dev, pr 추가

{
    "name": "solarmon",
    "version": "0.0.1",
    "scripts": {
      "dev": "NODE_ENV=development node ./bin/www",
      "prd": "NODE_ENV=production node ./bin/www"
    },
    "dependencies": {
      }
}

실행
> cd /var/www/solarmon/
> npm run dev
--> 윈도우에서는 역시나 NODE_ENV를 인식하지 못함. $env나 set을 사용해도 오류가 발생함

* cross-env 설치 (
OS와 상관없이 환경변수를 설정할 수 있도록 해주는 모듈
global(-g)로 설치해야 함
> npm install -g cross-env

package.json 수정
"dev": "cross-env NODE_ENV=development node ./be/bin/www",
"pr": "cross-env NODE_ENV=production node ./be/bin/www"

* 실행 확인
> cd /var/www/solarmon/
> npm run dev
> npm run pr
> yarn dev
> yarn pr


* 포트 설정
package.json 수정 - 포트 추가
"pr": "cross-env NODE_ENV=production PORT=80 node ./be/bin/www"

* cors 설정
cors는 8080 -> 3000 연결을 위해 설정했었음. 개발시에만 사용하도록 변경
be/app.js 수정
if (process.env.NODE_ENV !== 'production') app.use(cors())


2. 프론트엔드 모드 변경 실행
fe 모드 구분: yarn serve(개발), yarn build(배포)
모드 확인: fe/src/App.vue 파일 수정
title: process.env.NODE_ENV // 'Vuetify.js'

> cd fe
> yarn serve 또는 yarn build
개발 or 배포 모드로 실행하면 타이틀에 현재 모드가 표시된다.

* API로 경로를 모드별로 변경
fe/src/main.js 파일에 apiRootPath 선언 추가
Vue.prototype.$apiRootPath = process.env.NODE_ENV !== 'production' ? 'http://localhost:3000/api/' : '/api/'

fe/src/views/user.vue
모든 api에 대해서 '/api/user'를 `${this.$apiRootPath}user` 방식으로 변경

fe/src/App.vue 파일 수정
title: this.$apiRootPath // 'Vuetify.js'

3. 연속 실행 명령 응용
* solarmon/package.json 파일 수정
"scripts": {
      "dev": "cross-env NODE_ENV=development node ./be/bin/www",
      "serve": "cd fe && yarn serve",
      "pr": "cd fe && yarn && yarn build && cd ../be && yarn && cd .. && cross-env NODE_ENV=production PORT=80 node ./be/bin/www"
    },

- dev: 개발모드 back-end 실행
- serve: 개발모드 front-end 실행
- pr: 배포모드 실행

* 로컬(개발 모드)에서 실행
> cd /var/www/solarmon/
- Back-end 실행
> yarn dev
- Front-end 실행
> yarn serve

* 서버(배포 모드)에서 실행
> cd /var/www/solarmon/
> yarn pr

--> 로컬에서 서버 모드 실행(yarn pr) 시 80 포트 권한문제가 발생한다.
'port 80 requires elevated privileges'

--> NCP 서버에서는 yarn pr로 잘 실행됨.


* NCP 서버에서 확인하기
 - ACG에 80포트 추가 (TCP, 0.0.0.0/0, 80)
 - ncp 터미널 접속
> cd /var/www/solarmon
 - git으로 소스 갱신
> git pull
 - 서버모드로 실생
> yarn pr

--> cross-env가 설치되어 있지 않은 경우 cross-env 설치
> npm install -g cross-env

--> 80포트로 접속 성공


**** 서버(배포 모드)에서 실행
> cd /var/www/solarmon/
> yarn pr






34. pm2로 안정적인 서버 만들기 ===> 강좌에서 결과적으로 pm2 사용하지 않음.
강좌에서 다른 방법을 사용한다고 함. (오토스케일링 시 증설 서버의 IP를 알수 없기 때문 등등)
그전에 동일하게 시도를 했는데, 경로가 solarmon/source가 생기고 거기에 배포가 됨. 따라서 사용하지 않음.

pm2, pm2-logrotate는 제거
- 서버/로컬 (npm, yarn 모두 설치를 했었기 때문에 모두 삭제)
> npm uninstall pm2-logrotate
> npm uninstall pm2
> yarn global remove pm2-logrotate
> yarn global remove pm2

-----

- pm2를 로컬에서 설치해서 사용해보기
* pm2 설치
> yarn global add pm2
> pm2 -v
4.2.3

* pm2 사용해보기
- pm2로 www 실행
> cd /var/www/solarmon
> pm2 start ./be/bin/www

- pm2 확인하기
> pm2 log
> pm2 monit

- pm2 관리하기
> pm2 status

- pm2 서비스 종료
www 끄기
> pm2 stop www
www 지우기
> pm2 delete www

* pm2 설정파일 만들기
> cd /var/www/solarmon
> pm2 init
 ecosystem.config.js 파일이 생성됨(샘플)

- ecosystem.config.js 파일 수정
apps : [{
    name: 'solarmon',
    script: './be/bin/www',
    env: {
      NODE_ENV: 'development',
      PORT: 3000
    },
    env_pr: {
      NODE_ENV: 'production',
      PORT: 80
    }
  }],

* pm2 설정파일로 실행하기
- 개발용
> pm2 start
- 배포용
> pm2 start --env pr
> pm2 start ecosystem.comfig.js --env pr

* 로그 확인
> pm2 log

* out 메시지 로그 파일 크기 제한
- out 메시지 로그 파일이 커지는 것을 방지. PM2 Rotating Logs 사용
- logrotate 설치
> pm2 install pm2-logrotate
- 로그 파일이 7일 동안만 유지
> pm2 set pm2-logrotate:retain 7


35. pm2로 실제 서버에 배포하기
* package.json에 pm2 추가
"pm2": "cd fe && yarn && yarn build && cd ../be && yarn && cd .. && pm2 start --env pr"

* pm2 종속요소 설치
> yarn pm2

* 서버에 적용하기
- 서버 디스크 용량 확인
> df -h
- 서버에 pm2 설치 -> yarn 설치 시 경로 문제가 있어 npm으로 설치해야 함
> npm i pm2 -g
> pm2 -v
4.2.3

- 서버에 logrotate 설치
> pm2 install pm2-logrotate

- 로그 파일이 7일 동안만 유지
> pm2 set pm2-logrotate:retain 7

- 로컬 소스를 github에 push

- 서버에서 코드 최신화
> cd /var/www/solarmon
> git pull
- 서버에 종속요소 설치
> yarn pm2

* 배포하기
- ecosystem.comfig.js 파일 수정
deploy : {
    pr : {
      user : 'root',
      host : [{host: '101.101.160.190', port: '2000'}],
      key  : 'D:/GitHub/bishopdevlabKey.pem',
      ref  : 'origin/master',
      repo : 'git@github.com:bishopdevlab/solarmon.git',
      ssh_options: 'StrictHostKeyChecking=no',
      path : '/var/www/solarmon',
      'post-deploy' : 'yarn pm2'
    }
  }

- 배포
> pm2 deploy pr
--> 배포 실패. 에러 메시지
Deploy failed
spawn sh ENOENT

==> 에러 해결: 윈도우에서는 cmd나 powershell에서는 배포가 안됨. Git bash를 사용하면 됨.
Git bash를 관리자 권한으로 실행 후 해당 경로로 이동
> pm2 deploy ecosystem.config.js pr setup
몇차례 비밀번호 입력


*****--> 배포 실패로 인해서 이후 단계 미진행
* 리눅스 부팅 시 pm2 자동 실행
> pm2 startup

- solarmon이 실행중인지 확인 후 상태 저장
> pm2 status
> pm2 save

- 리눅스 리부팅
> reboot

- pm2 확인
> pm2 status
